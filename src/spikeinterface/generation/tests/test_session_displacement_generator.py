from spikeinterface.generation.session_displacement_generator import generate_inter_session_displacement_recordings
from spikeinterface.generation.drifting_generator import generate_drifting_recording
import numpy as np


class TestSessionDisplacementGenerator:

    def test_x_y_shift_all_parameters_rigid(self):
        """ """
        output_recordings, output_sorting = generate_inter_session_displacement_recordings(
            num_units=5,
            rec_durations=[10, 10, 25],
            rec_shifts=((0, 0), (0, 100), (50, 200)),
            seed=42,
        )

        # TODO: request extra outputs, test that
        # test that spike vector are different, no they are the same, we want this randomized? no probably better they are the same...? if want different, can set seed=None. Maybe test this
        # maybe do a test on the templates directly. Test where the peak is! then check it matches. that is OK for 7. For x can check that peak is smaller if
        # further from the probe...

        # TODO: document about random seed behaviour, indeed spike times are differet (other things will be too) across recordings
        # but not if the seed is fixed.

    def test_x_y_shift_non_rigid(self):
        pass

    def test_x_y_shift_peak_detection_rigid(self):  # TODO: test something going off the probe
        pass

    def test_x_y_shift_peak_detection_nonrigid(self):
        pass

    def test_same_as_generate_ground_truth_recording(self):
        """
        It is expected that inter-session displacement randomly
        generated recording and injected motion recording will
        use exactly the same method to generate the ground-truth
        recording (without displacement or motion). To check this,
        set their kwargs equal and seed, then generate a non-displaced
        recording. It should be identical to the static recroding
        generated by `generate_drifting_recording()`.
        """

        # Set some shared kwargs
        num_units = 5
        duration = 10
        sampling_frequency = 30000.0
        probe_name = "Neuropixel-128"
        generate_probe_kwargs = None
        generate_unit_locations_kwargs = dict()
        generate_templates_kwargs = dict(ms_before=1.5, ms_after=3)
        generate_sorting_kwargs = dict()
        generate_noise_kwargs = dict()
        seed = 42

        # Generate a inter-session displacement recording with no displacement
        no_shift_recording, _ = generate_inter_session_displacement_recordings(
            num_units=num_units,
            rec_durations=[duration],
            rec_shifts=((0, 0)),
            sampling_frequency=sampling_frequency,
            probe_name=probe_name,
            generate_probe_kwargs=generate_probe_kwargs,
            generate_unit_locations_kwargs=generate_unit_locations_kwargs,
            generate_templates_kwargs=generate_templates_kwargs,
            generate_sorting_kwargs=generate_sorting_kwargs,
            generate_noise_kwargs=generate_noise_kwargs,
            seed=seed,
        )
        no_shift_recording = no_shift_recording[0]

        # Generate a drifting recording with no drift
        static_recording, _, _ = generate_drifting_recording(
            num_units=num_units,
            duration=duration,
            sampling_frequency=sampling_frequency,
            probe_name=probe_name,
            generate_probe_kwargs=generate_probe_kwargs,
            generate_unit_locations_kwargs=generate_unit_locations_kwargs,
            generate_templates_kwargs=generate_templates_kwargs,
            generate_sorting_kwargs=generate_sorting_kwargs,
            generate_noise_kwargs=generate_noise_kwargs,
            generate_displacement_vector_kwargs=dict(
                motion_list=[
                    dict(
                        drift_mode="zigzag",
                        non_rigid_gradient=None,
                        t_start_drift=1.0,
                        t_end_drift=None,
                        period_s=200,
                    ),
                ]
            ),
            seed=seed,
        )

        # Check the templates and raw data match exactly.
        assert np.array_equal(
            no_shift_recording.get_traces(start_frame=0, end_frame=10),
            static_recording.get_traces(start_frame=0, end_frame=10),
        )

        assert np.array_equal(no_shift_recording.templates, static_recording.drifting_templates.templates_array)
